[pipeline:main]
pipeline = request_id server_cookie api

[app:api]
use = egg:openprocurement.api
couchdb.db_name = ${options['couchdb_db']}
couchdb.url = ${options['couchdb_url']}
{% if 'username' in parts['couchdb.ini'] %}couchdb.admin_url = http://${parts['couchdb.ini'].username+':'+parts['couchdb.ini'].password+'@' if 'username' in parts['couchdb.ini'] else ''}${parts['couchdb.ini'].host}:${parts['couchdb.ini'].port}/{% end %}
{% if 'reader_username' in parts['couchdb.ini'] %}couchdb.reader_username = ${parts['couchdb.ini'].reader_username}{% end %}
{% if 'reader_password' in parts['couchdb.ini'] %}couchdb.reader_password = ${parts['couchdb.ini'].reader_password}{% end %}
auth.file = ${options['auth_file']}
pyramid.reload_templates = ${options['debug']}
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.debug_templates = ${options['debug']}
pyramid.default_locale_name = en
exclog.extra_info = true
{% if 'health_threshold' in options %}health_threshold = ${options['health_threshold']}{% end %}
{% if 'update_after' in options %}update_after = ${options['update_after']}{% end %}
{% if 'plugins' in options %}plugins = ${options['plugins']}{% end %}
{% if 'aws_access_key' in options %}
aws.s3_bucket = ${options['aws_s3_bucket']}
aws.access_key = ${options['aws_access_key']}
aws.secret_key = ${options['aws_secret_key']}
{% end %}
{% if 'id' in options %}id = ${options['id']}{% end %}
{% if options['debug'] == 'true' %}
filter-with = profile

[filter:profile]
use = egg:repoze.profile
log_filename = myapp.profile
cachegrind_filename = cachegrind.out.myapp
discard_first_request = true
path = /__profile__
flush_at_shutdown = true
unwind = false
{% end %}
{% if options['debug'] == 'false' %}
filter-with = proxy-prefix

[filter:proxy-prefix]
use = egg:PasteDeploy#prefix
{% end %}
[filter:request_id]
paste.filter_factory = request_id_middleware.middleware:RequestIdMiddleware.factory
env_request_id = REQUEST_ID
resp_header_request_id = X-Request-ID

[filter:server_cookie]
paste.filter_factory = server_cookie_middleware.middleware:ServerCookieMiddleware.factory
cookie_name = SERVER_ID

[server:main]
use = egg:chaussette
host = 0.0.0.0
port = 6543
backend = gevent

# Begin logging configuration

[loggers]
keys = root,openprocurement${',exc_logger' if 'exc_logger' in options else ''}

[handlers]
keys = console${',loggly' if 'loggly' in options else ''}${',journal' if 'journal' in options else ''}

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console${',loggly' if 'loggly' in options else ''}

[logger_openprocurement]
level = DEBUG
handlers = {% if 'journal' in options %}journal{% end %}
qualname = openprocurement

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic
{% if 'exc_logger' in options %}
[logger_exc_logger]
level = ERROR
handlers = {% if 'journal' in options %}journal{% end %}
qualname = exc_logger
propagate = 0
{% end %}
{% if 'loggly' in options %}
[handler_loggly]
class = loggly.handlers.HTTPSHandler
args = ('https://logs-01.loggly.com/inputs/${options['loggly']}/tag/python,api/','POST')
{% end %}
{% if 'journal' in options %}
[handler_journal]
class = ExtendedJournalHandler.ExtendedJournalHandler
args = ()
{% end %}
[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s

# End logging configuration
